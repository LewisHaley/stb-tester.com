<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Using Jenkins to schedule &amp; report stb-tester scripts</title>
  <link href="stb-tester.css" media="all" rel="stylesheet" type="text/css" />

  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-34036034-1']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>

</head>

<!-- Copyright 2012 David Röthlisberger <david@rothlis.net>. All rights reserved. -->

<body id="jenkins">

<div id="header">
  <h1>Using Jenkins to schedule &amp; report stb-tester scripts</h1>
  <p id="about">
    By <a href="http://david.rothlis.net">David Röthlisberger</a>.
    Last updated @UPDATED@.
  </p>
</div>

<div id="content">

%(body)s

<!-- Begin reStructuredText content -->

`stb-tester`_ is an open-source command-line tool that runs automated tests
against a set-top box or similar device by capturing and analysing its video
output. `Jenkins`_ is an open-source "continuous integration" tool with a web
interface. Jenkins is typically used to run software compilation jobs and
associated unit tests, but here we will use it to run stb-tester test scripts
and report on the results.

This article illustrates how easy it is to integrate stb-tester with an
external scheduling & reporting system. Using Jenkins in this way will give you
a very useful, working solution in only a couple of hours; eventually you may
want more control over the test scheduling, or more customised reports, which
would require building your own system (perhaps as a Jenkins plugin, perhaps a
separate system).

System overview
---------------

.. image:: stb-tester+jenkins+setup.svg

The Jenkins server runs on the **master** PC, which is attached to one or more
Jenkins **nodes** or slaves. Each node is attached to one set-top box (the
**system under test**) via an infra-red emitter and a video-capture device. A
single PC can host multiple Jenkins nodes (we are currently running 4 nodes,
i.e. 4 video-capture devices + 4 set-top boxes, per PC).

Via the web interface you create a Jenkins **job** to run one or more
stb-tester scripts. The job can be configured to run on a specific node, or on
any available node that has been tagged with a particular label. The job can be
configured to run once (to be scheduled manually with a single click from the
Jenkins home page), or continuously.

When a job is scheduled, the Jenkins master instructs the node to run the job;
the node checks out the source code repository containing the stb-tester
scripts, runs the scripts with `stbt run`, and writes the results into an xml
file. The master then retrieves the xml results and other artifacts of the test
run from the node. If all nodes are busy, Jenkins manages a queue of pending
jobs.

.. container:: figure

  .. image:: jenkins+jobs.png

  Jenkins jobs

Typically you would have several jobs running the same test (or set of tests)
against different software versions of the system under test (the current
production and development versions, at minimum). A "sanity pack" job might run
a small selection of your test scripts, and another "soak test" job might run
the same tests, plus others, over and over.

Node **labels** allow you to say things like "run this job on any node
connected to a set-top box with software version x.y" or, for tests that
require a specific broadcast input signal, "on any node connected to a set-top
box with software version x.y *and* connected to a modulator" (modulators are
expensive! And not every test requires one).

.. container:: figure

  .. image:: jenkins+xunit+graph.png

  Jenkins test result graph

Jenkins displays **test results** for each run, and allows drilling down into
failing tests to view logs from standard output and standard error.

.. container:: fullwidth-figure

  .. image:: jenkins+xunit+results.png

  Jenkins test result details

.. container:: figure

  .. image:: jenkins+artifacts.png

  Jenkins job artifacts

In addition to the above logs, Jenkins gathers any **build artifacts**
generated by the test run, as specified in the job configuration. These can
include custom logs, and screenshots and/or videos of the test run.

Detailed instructions
---------------------

The following instructions assume that the Jenkins master and nodes are all
Unixy systems, and that you have a basic knowledge of Unix systems
administration, the command line, and `stbt`.

I recommend that you create an RPM, puppet script or similar mechanism to
automate the configuration of the node PCs.

Install `stbt` on the node PC
-----------------------------

Create a user called "stb-tester"[#user]_. Make sure this user can read from
the video-capture device node (typically ``/dev/video0`` or ``/dev/video1``)
[#video-group]_.

Install stb-tester and ensure that ``stbt`` is on the `stb-tester` user's
``PATH``.

Create a `stbt` configuration file in ``~stb-tester/.config/stbt/stbt.conf``
[#multiple-configs]_ with the correct GStreamer `source_pipeline` and
`control`. Set ``sink_pipeline = fakesink``.

As the `stb-tester` user, checkout the repository containing your `stbt`
scripts. Make sure you can checkout and update without any user interaction
such as specifying a password (set up any ssh keys to your source control
server as necessary.)

Run a script through `stbt run` just to make sure everything is working
correctly.

Install Java. [#install-java]_

Install Jenkins
---------------

Install Jenkins on the master PC and make it start automatically.
[#install-jenkins]_

If you'd like to access the Jenkins web UI at the standard http port (instead
of 8080), you will have to install a "reverse proxy" like apache to forward
requests from port 80 through to the Jenkins server. [#httpd]_

Give the `jenkins` user a login shell. [#login-shell]_

SSH from Jenkins master PC to node PC
-------------------------------------

On the Jenkins master PC, generate a public & private key pair for the
`jenkins` user. [#ssh-keygen]_ Install the public key on the node PC.
[#public-key]_

Ensure that you can ssh from the master PC, as user `jenkins`, to
``stb-tester@node-hostname``. [#ssh-keys-debugging]_ Do this at least once to
avoid the warning `"the authenticity of host ... can't be established. Are you
sure you want to continue connecting?"`

Add the node details on Jenkins
-------------------------------

In the Jenkins web interface: `Manage Jenkins` > `Manage Nodes` > `New Node`.

* Dumb Slave.
* Node name: Give a combination of the node PC's hostname and the system under
  test it is connected to; for example "testnode1-stb123".

.. this comment is necessary to break above & below into 2 separate <ul>s

* # of executors: ``1``
* Remote FS root: ``~stb-tester/`` (or the subdirectory for this node,
  [#multiple-configs]_ if running multiple nodes on a single PC).
* Labels: Anything you'd like, such as the software version on the attached
  set-top box; you can enter multiple labels.
* Usage: Utilize this slave as much as possible.
* Launch method: Launch slave agents on Unix machines via SSH. [#ssh-slaves]_
* Host: The node PC's hostname.
* Username: ``stb-tester``
* Password: Leave blank.
* Private Key File: ``~jenkins/.ssh/id_rsa``
* Environment variables: Specify STBT_CONFIG_FILE if not using the default
  location. [#multiple-configs]_

Check the node's status in the `Manage Nodes` page. Jenkins provides logs of
the connection attempt if you have any trouble.

Create a job
------------

In the Jenkins web interface: `New Job`.

* Build a free-style software project.
* Job name: Give a combination of the test suite this job will run, and the
  version of the system under test that it will run on; for example "sanity
  pack - 8.0rc2".

.. this comment is necessary to break above & below into 2 separate <ul>s

* Restrict where this project can be run: Enter the label for the nodes where
  this job can be run (e.g. "8.0rc2").
* Source code management: Give the details for the repository containing the
  test scripts. You may need to install the Jenkins plugin for your version
  control system. [#jenkins-plugin]_
* Build: Execute shell: Enter a shell script like::

    stbt run path/to/test1.py
    stbt run path/to/test2.py

  (note that the parameters like `source-pipeline` will be taken from the
  `stbt` config file you set up earlier).

First test the shell command directly on the node PC, logged in as `stb-tester`
over ssh from the `jenkins` user at the master PC. Then try running
the job from Jenkins: |jenkins+build+now.png|

.. |jenkins+build+now.png| image:: jenkins+build+now.png
   :align: middle
   :alt: Build Now

Test results
------------

At this point the shell command will become more complex, so instead of typing
it into each job's configuration, create a shell script on the node and
configure the Jenkins job to run this script. For a complete example see
`jenkins-stbt-run`_, which takes as arguments the `stbt` scripts to run.

.. container:: figure

  ::

    <?xml version='1.0' encoding='UTF-8'?>
    <testsuites>
      <testsuite name='uitests' tests='8'>
        <testcase name='iPlayer_plays_video' time='152'>
          <system-out>...</system-out>
          <system-err>...</system-err>
        </testcase>
        <testcase name='resume_from_active_standby' time='108'>
          <failure />
          <system-out>FAIL: Didn't find match ...</system-out>
          <system-err>...</system-err>
        </testcase>
        ...

  results.xml

`jenkins-stbt-run` creates a ``results.xml`` file in the `xUnit format`_,
containing each test's success or failure status and standard output and
standard error logs.

Install the Jenkins xUnit plugin and modify the job configuration as follows:

* Post-build Actions: Publish xUnit test result report.
* Add: JUnit.
* JUnit Pattern: ``results.xml`` (this is the path to the file generated by
  `jenkins-stbt-run`, relative to the Jenkins workspace).
* Failed Tests: Total: Threshold: ``0``

(Or use the yellow "unstable" for test failures, and reserve the red "failure"
for test *errors*. Jenkins will also mark the job as failed if the shell script
returns a non-zero exit status.)

Artifacts
---------

You can modify `jenkins-stbt-run` to collect other logs directly from the
system under test while the `stbt` script is running. The xUnit xml file
doesn't provide a place to put these logs, but you can save them as "job
artifacts", viewable from the Jenkins web interface.

Modify the job configuration:

* Post-build Actions: Archive the artifacts
* Files to archive: ``runs/`` (This is a directory created under the Jenkins
  workspace by `jenkins-stbt-run`; in addition to the standard output & error
  logs it contains the screenshot taken by `stbt run` when `wait_for_match`
  fails.)

At the end of the job run, Jenkins will copy the artifacts to the master PC.

Record a video of each test run
-------------------------------

.. role:: raw-html(raw)
   :format: html

.. container:: figure

  .. image:: hdpvr-mp4-pipeline.svg

  Source pipeline to remux HD PVR
  :raw-html:`<br />`
  video to MP4 and save it to disk

To record a video of each test run, configure the GStreamer source or sink
pipeline to save to a `filesink`. Video encoding is quite processor-intensive,
so it is best to save the video from the capture device before decoding it. The
example source-pipeline shown here takes the input from the Hauppauge HD PVR
(H.264 MPEG-TS) and uses a GStreamer *tee* element to split the pipeline in
two: One branch to save the video to disk, the second branch as the source for
`stbt`. Before saving to disk it re-muxes the video into the HTML5-friendly MP4
container, so that the video can be played directly in the browser.

As always, test your pipeline directly (with `gst-launch`) before integrating
it with `stbt run` and Jenkins.

Soak tests
----------

To have a job run continuously, install the Jenkins Parameterized Trigger
plugin and modify the job configuration:

* Post-build Actions: Trigger parameterized build on other projects.
* Projects to build: Specify this same project.
* Trigger when build is: Complete (always trigger).
* Trigger build without parameters (unless, of course, you have actually
  configured this build to use parameters).

Note that you have to use the Parameterized Trigger plugin even when your job
doesn't use the Jenkins parameterized build feature; the built-in "Build other
projects" post-build action doesn't work if you specify the selfsame project.

It would be nice to have a Jenkins plugin where the "soak-ness" of the job can
be specified when you schedule a build (without having to modify the job
configuration), similar to the way Jenkins prompts for `build parameters`_.
Any volunteers?

Disk space on the Jenkins master PC
-----------------------------------

If you are saving videos of each test run, you will need to keep an eye on the
Jenkins master's disk space.

Look into the "Discard old builds" setting of the job configuration, and note
that Jenkins allows you to mark an individual build as "Keep this log forever",
to exclude certain important builds (test failures, in our case) from being
discarded automatically.


.. container:: footnotes

  .. [#user] This, and all the following footnotes, give example commands for
     Fedora 17::

       useradd \
         -c "Slave for stb-tester-jenkins.example.com" \
         --create-home \
         stb-tester

  .. [#video-group] I had to add the user to group "video" (use ``-G video`` in
     the `useradd` command above).

  .. [#multiple-configs] If you are going to run multiple nodes on the same PC,
     you will need to create separate directories under ``~stb-tester/`` for
     each node, each containing a `stbt.conf`. Then, when you create the node
     configuration on the Jenkins master, you will specify ``STBT_CONFIG_FILE``
     pointing at the right `stbt.conf`.

     If you have multiple video-capture devices connected to the same PC, you
     will need to specify the device nodes in each `stbt.conf`'s source
     pipeline in such a way that the device node won't change across reboots.
     So instead of `/dev/video1` which depends on the order the devices are
     connected, use `/dev/v4l/by-path/...`.

  .. [#install-java] The Jenkins node agent is a java program. ``sudo yum
     install java``

  .. [#install-jenkins] http://jenkins-ci.org has packages for most systems. On
     Fedora 17::

       sudo wget -O /etc/yum.repos.d/jenkins.repo \
         http://pkg.jenkins-ci.org/redhat/jenkins.repo
       sudo rpm --import \
         http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
       sudo yum install jenkins
       sudo chkconfig jenkins on
       sudo service jenkins start

  .. [#httpd] Installing & configuring Apache on Fedora 17 (note that other
     Linux systems can be quite different, with separate config files for
     each virtual host)::

       sudo yum install httpd
       cat <<EOF | sudo sh -c 'cat >> /etc/httpd/conf/httpd.conf'
       ProxyRequests On
       <VirtualHost *:80>
               ServerAdmin you@example.com
               ProxyRequests Off
               <Proxy *>
                       Allow from all
               </Proxy>
               ProxyPreserveHost on
               ProxyPass / http://localhost:8080/
       </VirtualHost>
       EOF
       sudo systemctl enable httpd.service
       sudo systemctl start httpd.service
       sudo setsebool -P httpd_can_network_connect 1

  .. [#login-shell] Use ``sudo vipw`` to edit the password file, and for the
     `jenkins` user specify a valid shell (or leave it blank) instead of
     ``/bin/false``.

  .. [#ssh-keygen] As the `jenkins` user, run ``ssh-keygen`` and accept the
     default choices of ``~/.ssh/id_rsa`` and no passphrase.

  .. [#public-key] Add the contents of ``~jenkins/.ssh/id_rsa.pub`` from the
     master PC, to ``~stb-tester/.ssh/authorized_keys`` on the node PC.

  .. [#ssh-keys-debugging] Debugging problems with SSH keys can be frustrating.
     Try restarting the SSH server on the node PC after making any changes,
     check the system and security logs (on Fedora: ``/var/log/messages`` and
     ``/var/log/secure``) on the node PC after restarting the SSH server and
     after the connection attempt. Make sure the permissions on the ``~/.ssh``
     directory are correct::

         drwx------ stb-tester ~/.ssh
         -rw------- stb-tester ~/.ssh/authorized_keys
         -rw------- stb-tester ~/.ssh/id_rsa
         -rw-r--r-- stb-tester ~/.ssh/id_rsa.pub

  .. [#ssh-slaves] Jenkins will ssh to the node PC, install and launch the
     Jenkins client. This client will then communicate with the master
     directly. On older versions of Jenkins, you will have to install the `SSH
     Slaves` plugin to get this launch method.

  .. [#jenkins-plugin] Jenkins plugins are installed via the Jenkins web
     interface. Go to `Manage Jenkins` > `Manage Plugins`.


.. _stb-tester: http://stb-tester.com
.. _Jenkins: http://jenkins-ci.org
.. _jenkins-stbt-run: https://github.com/drothlis/stb-tester/blob/master/extra/jenkins-stbt-run
.. _xUnit format: https://svn.jenkins-ci.org/trunk/hudson/dtkit/dtkit-format/dtkit-junit-model/src/main/resources/com/thalesgroup/dtkit/junit/model/xsd/junit-4.xsd
.. _build parameters: https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Build


<!-- End reStructuredText content -->

</div>

<div id="footer">
<p>
  This article copyright © 2012 <a href="http://david.rothlis.net">David
  Röthlisberger</a> and <a href="http://www.youview.com">YouView TV Ltd.</a>
  <br />
  Diagram by Will Manley.<br />
  Released under the <a href="http://www.gnu.org/copyleft/fdl.html">GNU Free
  Documentation License</a>.
</p>
</div>

</body>
</html>
